{"ast":null,"code":"var _jsxFileName = \"/home/clayton/Desktop/Dev/Authentication_Template/Authentication_Template/client/src/index.js\";\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport NavBar from './components/NavBar';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport Profile from './components/profile/Profile';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport withSession from './components/withSession';\nimport * as serviceWorker from './serviceWorker';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4444/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token\n      }\n    });\n  },\n  onError: ({\n    networkError\n  }) => {\n    if (networkError) {\n      console.log(\"network error\", networkError);\n    }\n  }\n});\n\nconst Root = ({\n  refetch,\n  session\n}) => /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(NavBar, {\n  session: session,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  exact: true,\n  component: App,\n  session: session,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 15\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/signin\",\n  render: () => /*#__PURE__*/React.createElement(SignIn, {\n    refetch: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 50\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 15\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/signup\",\n  render: () => /*#__PURE__*/React.createElement(SignUp, {\n    refetch: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 50\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 15\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/profile\",\n  render: () => /*#__PURE__*/React.createElement(Profile, {\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 52\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 15\n  }\n}), /*#__PURE__*/React.createElement(Redirect, {\n  to: \"/\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 15\n  }\n}))));\n\nconst RootWithSession = withSession(Root);\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(RootWithSession, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/clayton/Desktop/Dev/Authentication_Template/Authentication_Template/client/src/index.js"],"names":["React","Fragment","ReactDOM","BrowserRouter","Router","Route","Switch","Redirect","App","NavBar","SignIn","SignUp","Profile","ApolloClient","ApolloProvider","withSession","serviceWorker","client","uri","fetchOptions","credentials","request","operation","token","localStorage","getItem","setContext","headers","authorization","onError","networkError","console","log","Root","refetch","session","RootWithSession","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":[" \nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport NavBar from './components/NavBar';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport Profile from './components/profile/Profile';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport withSession from './components/withSession';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4444/graphql',\n    fetchOptions: {\n        credentials: 'include'\n    },\n    request: operation => {\n        const token = localStorage.getItem('token');\n        operation.setContext({\n            headers: {\n                authorization: token\n            }\n        })\n    },\n    onError:({ networkError}) =>{\n        if (networkError){\n            console.log(\"network error\", networkError);\n        }\n    }\n})\n\nconst Root = ({ refetch, session }) => (\n  <Router>\n      <Fragment>\n          <NavBar session={session}/>\n          <Switch>\n              <Route path=\"/\" exact component={App} session={session}/>\n              <Route path=\"/signin\" render={()=> <SignIn refetch={refetch}/>}/>\n              <Route path=\"/signup\" render={()=> <SignUp refetch={refetch}/>}/>\n              <Route path =\"/profile\" render={()=> <Profile session={session}/>}/>\n              <Redirect to=\"/\"/>\n          </Switch>\n      </Fragment>\n  </Router>\n);\nconst RootWithSession = withSession(Root)\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n      <RootWithSession />\n  </ApolloProvider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}